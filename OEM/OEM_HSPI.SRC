; Code\Oem\OEM_HSPI.SRC generated from: Code\Oem\OEM_HSPI.C

$NOMOD51

NAME	OEM_HSPI

P0	DATA	080H
P1	DATA	090H
P2	DATA	0A0H
P3	DATA	0B0H
PSW	DATA	0D0H
ACC	DATA	0E0H
B	DATA	0F0H
SP	DATA	081H
DPL	DATA	082H
DPH	DATA	083H
PCON	DATA	087H
TCON	DATA	088H
TMOD	DATA	089H
TL0	DATA	08AH
TL1	DATA	08BH
TH0	DATA	08CH
TH1	DATA	08DH
CKCON	DATA	08EH
IE	DATA	0A8H
IP	DATA	0B8H
SCON	DATA	098H
SBUF	DATA	099H
T2CON	DATA	0C8H
T2MOD	DATA	0C9H
RCAP2L	DATA	0CAH
RCAP2H	DATA	0CBH
TL2	DATA	0CCH
TH2	DATA	0CDH
WDTCON	DATA	0D8H
MPRECF	DATA	0F7H
WDTEB	BIT	0D8H.1
WDTRST	BIT	0D8H.0
CY	BIT	0D0H.7
AC	BIT	0D0H.6
F0	BIT	0D0H.5
RS1	BIT	0D0H.4
RS0	BIT	0D0H.3
OV	BIT	0D0H.2
P	BIT	0D0H.0
TF1	BIT	088H.7
TR1	BIT	088H.6
TF0	BIT	088H.5
TR0	BIT	088H.4
IE1	BIT	088H.3
IT1	BIT	088H.2
IE0	BIT	088H.1
IT0	BIT	088H.0
EA	BIT	0A8H.7
ET2	BIT	0A8H.5
ES	BIT	0A8H.4
ET1	BIT	0A8H.3
EX1	BIT	0A8H.2
ET0	BIT	0A8H.1
EX0	BIT	0A8H.0
PS	BIT	0B8H.4
PT1	BIT	0B8H.3
PX1	BIT	0B8H.2
PT0	BIT	0B8H.1
PX0	BIT	0B8H.0
RD	BIT	0B0H.7
WR	BIT	0B0H.6
T1	BIT	0B0H.5
T0	BIT	0B0H.4
INT1	BIT	0B0H.3
INT0	BIT	0B0H.2
SM0	BIT	098H.7
SM1	BIT	098H.6
SM2	BIT	098H.5
REN	BIT	098H.4
TB8	BIT	098H.3
RB8	BIT	098H.2
TI	BIT	098H.1
RI	BIT	098H.0
TF2	BIT	0C8H.7
EXF2	BIT	0C8H.6
RCLK	BIT	0C8H.5
TCLK	BIT	0C8H.4
EXEN2	BIT	0C8H.3
TR2	BIT	0C8H.2
CT2	BIT	0C8H.1
CPRL2	BIT	0C8H.0
?PR?GPIO_HSPI_INIT?OEM_HSPI              SEGMENT CODE 
?PR?Enable_HSPI?OEM_HSPI                 SEGMENT CODE 
?PR?Disable_HSPI?OEM_HSPI                SEGMENT CODE 
?PR?HSPI_RamCode?OEM_HSPI                SEGMENT CODE 
?PR?HSPI_CmdRamCode?OEM_HSPI             SEGMENT CODE 
?PR?_ChangePLLFrequency?OEM_HSPI         SEGMENT CODE 
?PR?_ChangeSPIFlashReadMode?OEM_HSPI     SEGMENT CODE 
?XD?_ChangeSPIFlashReadMode?OEM_HSPI     SEGMENT XDATA OVERLAYABLE 
?PR?_ChangeHSRSMode?OEM_HSPI             SEGMENT CODE 
?XD?_ChangeHSRSMode?OEM_HSPI             SEGMENT XDATA OVERLAYABLE 
?PR?OEM_HSPI         SEGMENT CODE 
	EXTRN	DATA (MainFucnLow)
	EXTRN	DATA (MainFucnHigh)
	EXTRN	XDATA (WinFlashMark)
	EXTRN	XDATA (RamCodePort)
	EXTRN	XDATA (RamcodeCmd)
	EXTRN	XDATA (FLHCTRL1R)
	EXTRN	XDATA (HCTRL2R)
	EXTRN	XDATA (HSPICTRL2R)
	EXTRN	XDATA (HSPICTRL3R)
	EXTRN	XDATA (DSADR2)
	EXTRN	XDATA (HINSTC1)
	EXTRN	XDATA (ISR7)
	EXTRN	XDATA (IER7)
	EXTRN	XDATA (KBHISR)
	EXTRN	XDATA (KBHIKDOR)
	EXTRN	XDATA (KBHIDIR)
	EXTRN	XDATA (PM1STS)
	EXTRN	XDATA (PM1DO)
	EXTRN	XDATA (PM1DI)
	EXTRN	XDATA (PM2STS)
	EXTRN	XDATA (PM2DO)
	EXTRN	XDATA (PM2DI)
	EXTRN	XDATA (GPCRH0)
	EXTRN	XDATA (GPCRH3)
	EXTRN	XDATA (GPCRH4)
	EXTRN	XDATA (GPCRH5)
	EXTRN	XDATA (GPCRH6)
	EXTRN	XDATA (PLLCTRL)
	EXTRN	XDATA (PLLFREQR)
	EXTRN	XDATA (RSTC4)
	EXTRN	CODE (DisableAllInterrupt)
	EXTRN	BIT (F_Service_MS_1)
	EXTRN	XDATA (HSPI_FPT_timeout)
	PUBLIC	_ChangeHSRSMode
	PUBLIC	_ChangeSPIFlashReadMode
	PUBLIC	_ChangePLLFrequency
	PUBLIC	HSPI_CmdRamCode
	PUBLIC	HSPI_RamCode
	PUBLIC	Disable_HSPI
	PUBLIC	Enable_HSPI
	PUBLIC	GPIO_HSPI_INIT
; /*-----------------------------------------------------------------------------
;  * TITLE: CORE_HSPI.C
;  *
;  * Copyright (c) 2009- , ITE Corporation. All Rights Reserved.
;  *
;  * You may not reproduce, distribute, publish, display, perform, modify, adapt,
;  * transmit, broadcast, present, recite, release, license or otherwise exploit
;  * any part of this publication in any form, by any means, without the prior
;  * written permission of Insyde Software Corporation.
;  *---------------------------------------------------------------------------*/
;  
; #include <CORE_INCLUDE.H>
; #include <OEM_INCLUDE.H>
; 
; //----------------------------------------------------------------------------
; // Disable HSPI interface pins 
; //----------------------------------------------------------------------------

	RSEG  ?PR?OEM_HSPI
Com0039:
L?0058:
	USING	0
	MOV  	DPTR,#GPCRH3
	MOV  	A,#080H
L?0059:
	MOVX 	@DPTR,A
	MOV  	DPTR,#GPCRH4
	MOVX 	@DPTR,A
	MOV  	DPTR,#GPCRH5
	MOVX 	@DPTR,A
	MOV  	DPTR,#GPCRH6
	MOVX 	@DPTR,A
	RET  	
; END OF Com0039

; void GPIO_HSPI_INIT(void)

	RSEG  ?PR?GPIO_HSPI_INIT?OEM_HSPI
GPIO_HSPI_INIT:
			; SOURCE LINE # 18
; {
			; SOURCE LINE # 19
; 	GPCRH3 = INPUT;                 // Set input mode
			; SOURCE LINE # 20
; 	GPCRH4 = INPUT;                 // Set input mode
			; SOURCE LINE # 21
; 	GPCRH5 = INPUT;                 // Set input mode
			; SOURCE LINE # 22
; 	GPCRH6 = INPUT;                 // Set input mode
			; SOURCE LINE # 23
	LCALL	L?0058
;     SET_MASK(RSTC4,RSPI);           // Reset SPI
			; SOURCE LINE # 24
	MOV  	DPTR,#RSTC4
	MOVX 	A,@DPTR
	ORL  	A,#01H
	MOVX 	@DPTR,A
; }
			; SOURCE LINE # 25
	RET  	
; END OF GPIO_HSPI_INIT

; 
; //----------------------------------------------------------------------------
; // Enable HSPI interface
; //----------------------------------------------------------------------------
; void Enable_HSPI(void)

	RSEG  ?PR?Enable_HSPI?OEM_HSPI
Enable_HSPI:
			; SOURCE LINE # 30
; {
			; SOURCE LINE # 31
;     #ifdef HSPI_DefferingMode
;     CLEAR_MASK(IER7,Int_DeferredSPI);   // Disable HSPI interrupt 
;     ISR7 = Int_DeferredSPI;         // W/C interrupt status
;     #endif
;     
; 	GPCRH3 = ALT;                   // Set HSPI mode
			; SOURCE LINE # 37
	CLR  	A
	MOV  	DPTR,#GPCRH3
; 	GPCRH4 = ALT;                   // Set HSPI mode
			; SOURCE LINE # 38
; 	GPCRH5 = ALT;                   // Set HSPI mode
			; SOURCE LINE # 39
; 	GPCRH6 = ALT;                   // Set HSPI mode
			; SOURCE LINE # 40
	LCALL	L?0059
; 
;     #ifdef HSPI_DefferingMode
;     HINSTC1 = (ENDPI+ENDEI);        // Host Instruction Control 1 
;     #else
;     HINSTC1 = 0x00;
			; SOURCE LINE # 45
	MOV  	DPTR,#HINSTC1
	MOVX 	@DPTR,A
;     #endif
;     
;     HSPICTRL3R = 0x10;			    // set bit4 for not SST SPI ROM
			; SOURCE LINE # 48
	MOV  	DPTR,#HSPICTRL3R
	MOV  	A,#010H
	MOVX 	@DPTR,A
; 								    // clear bit4 for SST SPI ROM or set bit4 for not SST SPI ROM
;                            		    // For phoenix bios 
; 	//FLHCTRL1R = 0x00;			    // Flash Control Register 1
; 	HCTRL2R = 0x10;				    // Host Control 2 Register
			; SOURCE LINE # 52
	MOV  	DPTR,#HCTRL2R
	MOVX 	@DPTR,A
; 
;     #ifdef HSPI_DefferingMode
;     //ISR7 = Int_DeferredSPI;       // W/C interrupt status
;     SET_MASK(IER7,Int_DeferredSPI); // Enable interrupt 
;     #endif
; }
			; SOURCE LINE # 58
	RET  	
; END OF Enable_HSPI

; 
; //----------------------------------------------------------------------------
; // Disable HSPI interface
; //----------------------------------------------------------------------------
; void Disable_HSPI(void)

	RSEG  ?PR?Disable_HSPI?OEM_HSPI
Disable_HSPI:
			; SOURCE LINE # 63
; {
			; SOURCE LINE # 64
;     #ifdef HSPI_DefferingMode
;     CLEAR_MASK(IER7,Int_DeferredSPI);   // Disable HSPI interrupt 
;     ISR7 = Int_DeferredSPI;         // W/C interrupt status
;     //HCTRL2R = 0x80;
;     #endif
; 
;     HCTRL2R=0x00;
			; SOURCE LINE # 71
	CLR  	A
	MOV  	DPTR,#HCTRL2R
	MOVX 	@DPTR,A
; 
; 	GPCRH3 = INPUT;                 // Set input mode
			; SOURCE LINE # 73
; 	GPCRH4 = INPUT;                 // Set input mode
			; SOURCE LINE # 74
; 	GPCRH5 = INPUT;                 // Set input mode
			; SOURCE LINE # 75
; 	GPCRH6 = INPUT;                 // Set input mode
			; SOURCE LINE # 76
	LCALL	L?0058
;     SET_MASK(RSTC4,RSPI);           // Reset SPI
			; SOURCE LINE # 77
	MOV  	DPTR,#RSTC4
	MOVX 	A,@DPTR
	ORL  	A,#01H
	MOVX 	@DPTR,A
; }
			; SOURCE LINE # 78
	RET  	
; END OF Disable_HSPI

; 
; #pragma ot(8, SPEED)
; //----------------------------------------------------------------------------
; // Instructino is valid
; //----------------------------------------------------------------------------
; void HSPI_RamCode(void)

	RSEG  ?PR?HSPI_RamCode?OEM_HSPI
HSPI_RamCode:
			; SOURCE LINE # 84
; {
			; SOURCE LINE # 85
;     HINSTC1 = DISSV+DISS+ENDPI+ENDEI;   // Allow instruction
			; SOURCE LINE # 86
	MOV  	DPTR,#HINSTC1
	MOV  	A,#0FH
	MOVX 	@DPTR,A
;     //HINSTC1 = (DISSV+DISS);         // Allow instruction
;     ISR7 = Int_DeferredSPI;         // W/C interrupt status
			; SOURCE LINE # 88
	MOV  	DPTR,#ISR7
	MOV  	A,#08H
	MOVX 	@DPTR,A
;     
;     HSPI_FPT_timeout = 0x00;
			; SOURCE LINE # 90
	CLR  	A
	MOV  	DPTR,#HSPI_FPT_timeout
	MOVX 	@DPTR,A
;     TR0 = 0;                        // Disable timer 0
			; SOURCE LINE # 91
	CLR  	TR0
;     ET0 = 0;			            // Disable timer0 interrupt
			; SOURCE LINE # 92
	CLR  	ET0
;     TH0 = T_HSPI_ISRTime>>8;	    // set timer0 counter xx ms 
			; SOURCE LINE # 93
	MOV  	TH0,A
;     TL0 = T_HSPI_ISRTime;		    // set timer0 counter xx ms
			; SOURCE LINE # 94
	MOV  	TL0,#01H
;     TF0 = 0;			            // clear overflow flag
			; SOURCE LINE # 95
	CLR  	TF0
;     TR0 = 1;			            // enable timer0
			; SOURCE LINE # 96
	SETB 	TR0
?C0004:
; 
;     while(!TF0)                     // if isn't time out
			; SOURCE LINE # 98
	JNB  	TF0,$ + 6H
	LJMP 	?C0005
;     {
			; SOURCE LINE # 99
;         if(IS_MASK_SET(ISR7, Int_DeferredSPI))  // Check HSPI isr
			; SOURCE LINE # 100
	MOV  	DPTR,#ISR7
	MOVX 	A,@DPTR
	JNB  	ACC.3,?C0004
;         {
			; SOURCE LINE # 101
;             if(DSADR2==HSPI_ECCodeSpaceAddr)    // EC code space
			; SOURCE LINE # 102
	MOV  	DPTR,#DSADR2
	MOVX 	A,@DPTR
	XRL  	A,#018H
	JNZ  	?C0007
;             {
			; SOURCE LINE # 103
;                 HINSTC1 = DISSV+DISS+ENDPI+ENDEI;   // Allow instruction
			; SOURCE LINE # 104
	MOV  	DPTR,#HINSTC1
	MOV  	A,#0FH
	MOVX 	@DPTR,A
;                 //HINSTC1 = (DISSV+DISS);         // Allow instruction
;                 ISR7 = Int_DeferredSPI;         // W/C interrupt status
			; SOURCE LINE # 106
	MOV  	DPTR,#ISR7
	MOV  	A,#08H
	MOVX 	@DPTR,A
;                     
;                 TH0 = T_HSPI_ISRTime>>8;	    // set timer1 counter xx ms 
			; SOURCE LINE # 108
	CLR  	A
	MOV  	TH0,A
;                 TL0 = T_HSPI_ISRTime;	        // set timer1 counter xx ms
			; SOURCE LINE # 109
	MOV  	TL0,#01H
;                 TF0 = 0;			            // clear overflow flag
			; SOURCE LINE # 110
	CLR  	TF0
?C0008:
; 
;                 while(1)
			; SOURCE LINE # 112
;                 {
			; SOURCE LINE # 113
;                     if(IS_MASK_SET(ISR7, Int_DeferredSPI))
			; SOURCE LINE # 114
	MOV  	DPTR,#ISR7
	MOVX 	A,@DPTR
	JNB  	ACC.3,?C0010
;                     {
			; SOURCE LINE # 115
;                         HINSTC1 = DISSV+DISS+ENDPI+ENDEI;   // Allow instruction
			; SOURCE LINE # 116
	MOV  	DPTR,#HINSTC1
	MOV  	A,#0FH
	MOVX 	@DPTR,A
;                         //HINSTC1 = (DISSV+DISS);     // Allow instruction
;                         ISR7 = Int_DeferredSPI;     // W/C interrupt status
			; SOURCE LINE # 118
	MOV  	DPTR,#ISR7
	MOV  	A,#08H
	MOVX 	@DPTR,A
;                             
;                         TH0 = T_HSPI_ISRTime>>8;    // set timer1 counter xx ms 
			; SOURCE LINE # 120
	CLR  	A
	MOV  	TH0,A
;                         TL0 = T_HSPI_ISRTime;	    // set timer1 counter xx ms
			; SOURCE LINE # 121
	MOV  	TL0,#01H
;                         TF0 = 0; 
			; SOURCE LINE # 122
	CLR  	TF0
;                         HSPI_FPT_timeout = 0x00;
			; SOURCE LINE # 123
	MOV  	DPTR,#HSPI_FPT_timeout
	MOVX 	@DPTR,A
;                         continue;
			; SOURCE LINE # 124
	SJMP 	?C0008
;                     }
			; SOURCE LINE # 125
?C0010:
; 
;                     if(TF0)
			; SOURCE LINE # 127
	JNB  	TF0,?C0008
;                     {
			; SOURCE LINE # 128
;                         if(++HSPI_FPT_timeout>=35)     // 3 sec EC auto wake up from ram code.
			; SOURCE LINE # 129
	MOV  	DPTR,#HSPI_FPT_timeout
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
	CLR  	C
	SUBB 	A,#023H
	JC   	?C0012
;                         {
			; SOURCE LINE # 130
;                             HSPI_FPT_timeout=0xFF;
			; SOURCE LINE # 131
	MOV  	A,#0FFH
	MOVX 	@DPTR,A
;                             break;
			; SOURCE LINE # 132
	SJMP 	?C0009
;                         }
			; SOURCE LINE # 133
?C0012:
;                         TH0 = T_HSPI_ISRTime>>8;	    // set timer1 counter xx ms 
			; SOURCE LINE # 134
	CLR  	A
	MOV  	TH0,A
;                         TL0 = T_HSPI_ISRTime;		    // set timer1 counter xx ms
			; SOURCE LINE # 135
	MOV  	TL0,#01H
;                         TF0 = 0;			            // clear overflow flag
			; SOURCE LINE # 136
	CLR  	TF0
;                     }
			; SOURCE LINE # 137
;                 }
			; SOURCE LINE # 138
	SJMP 	?C0008
?C0009:
;                 
;                 WinFlashMark = 0x33;
			; SOURCE LINE # 140
	MOV  	DPTR,#WinFlashMark
	MOV  	A,#033H
	MOVX 	@DPTR,A
;                 TR0 = 0;			    // disable timer1
			; SOURCE LINE # 141
	CLR  	TR0
;  	            TF0 = 0;			    // clear overflow flag
			; SOURCE LINE # 142
	CLR  	TF0
; 	            ET0 = 1;			    // Enable timer1 interrupt
			; SOURCE LINE # 143
	SETB 	ET0
; 	            
; 	            MainFucnLow = 0x00;     // Set main function low return vector
			; SOURCE LINE # 145
	CLR  	A
	MOV  	MainFucnLow,A
;                 MainFucnHigh= 0x02;     // Set main function high return vector
			; SOURCE LINE # 146
	MOV  	MainFucnHigh,#02H
; 	            #pragma asm
;                 CLR     PSW.3
	  CLR     PSW.3
;                 CLR     PSW.4           // IRam bank 0
	  CLR     PSW.4            
;                 PUSH    05EH            // Push main function low return vector
	  PUSH    05EH             
;                 PUSH    05FH            // Push main function high return vector       
	  PUSH    05FH             
;                 RETI                    // Return to main function 0x200 
	  RETI                     
;                 #pragma endasm
;             }
			; SOURCE LINE # 154
?C0007:
;             
;             HINSTC1 = DISSV+DISS+ENDPI+ENDEI;   // Allow instruction
			; SOURCE LINE # 156
	MOV  	DPTR,#HINSTC1
	MOV  	A,#0FH
	MOVX 	@DPTR,A
;             //HINSTC1 = (DISSV+DISS);         // Allow instruction
;             ISR7 = Int_DeferredSPI;     // W/C interrupt status
			; SOURCE LINE # 158
	MOV  	DPTR,#ISR7
	MOV  	A,#08H
	MOVX 	@DPTR,A
;                 
;             TH0 = T_HSPI_ISRTime>>8;    // set timer1 counter xx ms 
			; SOURCE LINE # 160
	CLR  	A
	MOV  	TH0,A
;             TL0 = T_HSPI_ISRTime;	    // set timer1 counter xx ms
			; SOURCE LINE # 161
	MOV  	TL0,#01H
;             TF0 = 0;
			; SOURCE LINE # 162
	CLR  	TF0
;         }
			; SOURCE LINE # 163
;     }
			; SOURCE LINE # 164
	LJMP 	?C0004
?C0005:
;     
;     TR0 = 0;			    // disable timer1
			; SOURCE LINE # 166
	CLR  	TR0
;     TF0 = 0;			    // clear overflow flag
			; SOURCE LINE # 167
	CLR  	TF0
;     ET0 = 1;			    // Enable timer1 interrupt 
			; SOURCE LINE # 168
	SETB 	ET0
; 
;     TL0 = Timer_1ms;      	// Reload timer
			; SOURCE LINE # 170
	CLR  	A
	MOV  	TL0,A
; 	TH0 = Timer_1ms>>8;	    // 1ms
			; SOURCE LINE # 171
	MOV  	TH0,#0FDH
;     TR0 = 1;                // Start timer0 running
			; SOURCE LINE # 172
	SETB 	TR0
;     ET0 = 1;				// Enable timer0 interrupt
			; SOURCE LINE # 173
	SETB 	ET0
;     F_Service_MS_1 = 1;     // Request 1 mS timer service.
			; SOURCE LINE # 174
	SETB 	F_Service_MS_1
; }
			; SOURCE LINE # 175
	RET  	
; END OF HSPI_RamCode

; 
; #pragma ot(8, SPEED)
; //----------------------------------------------------------------------------
; // Host send idle command to EC
; //----------------------------------------------------------------------------
; void HSPI_CmdRamCode(void)

	RSEG  ?PR?HSPI_CmdRamCode?OEM_HSPI
HSPI_CmdRamCode:
			; SOURCE LINE # 181
; {
			; SOURCE LINE # 182
; 	RamcodeCmd = 0x00;
			; SOURCE LINE # 183
	CLR  	A
	MOV  	DPTR,#RamcodeCmd
	MOVX 	@DPTR,A
; 
; 	if(RamCodePort==0x64)
			; SOURCE LINE # 185
	MOV  	DPTR,#RamCodePort
	MOVX 	A,@DPTR
	CJNE 	A,#064H,?C0014
; 	{
			; SOURCE LINE # 186
; 		KBHIKDOR = 0xFA;
			; SOURCE LINE # 187
	MOV  	DPTR,#KBHIKDOR
	MOV  	A,#0FAH
	MOVX 	@DPTR,A
; 	}
			; SOURCE LINE # 188
	SJMP 	?C0019
?C0014:
; 	else if(RamCodePort==0x66)
			; SOURCE LINE # 189
	MOV  	DPTR,#RamCodePort
	MOVX 	A,@DPTR
	CJNE 	A,#066H,?C0016
; 	{
			; SOURCE LINE # 190
; 		PM1DO = 0xFA;
			; SOURCE LINE # 191
	MOV  	DPTR,#PM1DO
	MOV  	A,#0FAH
	MOVX 	@DPTR,A
; 	}	
			; SOURCE LINE # 192
	SJMP 	?C0019
?C0016:
; 	else if(RamCodePort==0x6C)
			; SOURCE LINE # 193
	MOV  	DPTR,#RamCodePort
	MOVX 	A,@DPTR
	CJNE 	A,#06CH,?C0019
; 	{
			; SOURCE LINE # 194
; 		PM2DO = 0xFA;
			; SOURCE LINE # 195
	MOV  	DPTR,#PM2DO
	MOV  	A,#0FAH
	MOVX 	@DPTR,A
; 	}
			; SOURCE LINE # 196
?C0019:
;     
;  	while(1)
			; SOURCE LINE # 198
;   	{
			; SOURCE LINE # 199
;         #ifdef HSPI_DefferingMode
;         if(IS_MASK_SET(ISR7, Int_DeferredSPI))
;         {
;             HINSTC1 = DISSV+DISS+ENDPI+ENDEI;   // Allow instruction
;             //HINSTC1 = (DISSV+DISS);           // Allow instruction
;             ISR7 = Int_DeferredSPI;             // W/C interrupt status
;         }
;         #endif
;         
;   		if(RamCodePort==0x64)
			; SOURCE LINE # 209
	MOV  	DPTR,#RamCodePort
	MOVX 	A,@DPTR
	XRL  	A,#064H
	JNZ  	?C0021
; 		{
			; SOURCE LINE # 210
; 			if( IS_MASK_CLEAR(KBHISR,IBF)) continue;
			; SOURCE LINE # 211
	MOV  	DPTR,#KBHISR
	MOVX 	A,@DPTR
	JNB  	ACC.1,?C0019
?C0022:
;         	if( IS_MASK_CLEAR(KBHISR,C_D)) 
			; SOURCE LINE # 212
	MOV  	DPTR,#KBHISR
	MOVX 	A,@DPTR
	JB   	ACC.3,?C0023
;         	{
			; SOURCE LINE # 213
;                 RamcodeCmd = KBHIDIR;
			; SOURCE LINE # 214
	MOV  	DPTR,#KBHIDIR
	MOVX 	A,@DPTR
	MOV  	DPTR,#RamcodeCmd
	MOVX 	@DPTR,A
;                 continue;
			; SOURCE LINE # 215
	SJMP 	?C0019
;         	}
			; SOURCE LINE # 216
?C0023:
;             else
;             {
			; SOURCE LINE # 218
;        		    RamcodeCmd = KBHIDIR;
			; SOURCE LINE # 219
	MOV  	DPTR,#KBHIDIR
	MOVX 	A,@DPTR
	MOV  	DPTR,#RamcodeCmd
	MOVX 	@DPTR,A
;             }
			; SOURCE LINE # 220
;   		}
			; SOURCE LINE # 221
	SJMP 	?C0025
?C0021:
; 		else if(RamCodePort==0x66)
			; SOURCE LINE # 222
	MOV  	DPTR,#RamCodePort
	MOVX 	A,@DPTR
	XRL  	A,#066H
	JNZ  	?C0026
; 		{
			; SOURCE LINE # 223
;         	if ( IS_MASK_CLEAR(PM1STS,P_IBF)) continue;
			; SOURCE LINE # 224
	MOV  	DPTR,#PM1STS
	MOVX 	A,@DPTR
	JNB  	ACC.1,?C0019
?C0027:
;         	if ( IS_MASK_CLEAR(PM1STS,P_C_D)) 
			; SOURCE LINE # 225
	MOV  	DPTR,#PM1STS
	MOVX 	A,@DPTR
	JB   	ACC.3,?C0028
;             {
			; SOURCE LINE # 226
;                 RamcodeCmd = PM1DI;
			; SOURCE LINE # 227
	MOV  	DPTR,#PM1DI
	MOVX 	A,@DPTR
	MOV  	DPTR,#RamcodeCmd
	MOVX 	@DPTR,A
;                 continue;
			; SOURCE LINE # 228
	SJMP 	?C0019
;             }
			; SOURCE LINE # 229
?C0028:
;             else
;             {
			; SOURCE LINE # 231
;         	    RamcodeCmd = PM1DI;
			; SOURCE LINE # 232
	MOV  	DPTR,#PM1DI
	MOVX 	A,@DPTR
	MOV  	DPTR,#RamcodeCmd
	MOVX 	@DPTR,A
;             }
			; SOURCE LINE # 233
; 		}		
			; SOURCE LINE # 234
	SJMP 	?C0025
?C0026:
; 		else if(RamCodePort==0x6C)
			; SOURCE LINE # 235
	MOV  	DPTR,#RamCodePort
	MOVX 	A,@DPTR
	CJNE 	A,#06CH,?C0025
; 		{
			; SOURCE LINE # 236
;         	if ( IS_MASK_CLEAR(PM2STS,P_IBF)) continue;
			; SOURCE LINE # 237
	MOV  	DPTR,#PM2STS
	MOVX 	A,@DPTR
	JNB  	ACC.1,?C0019
?C0032:
;         	if ( IS_MASK_CLEAR(PM2STS,P_C_D)) 
			; SOURCE LINE # 238
	MOV  	DPTR,#PM2STS
	MOVX 	A,@DPTR
	JB   	ACC.3,?C0033
;         	{
			; SOURCE LINE # 239
;                 RamcodeCmd = PM2DI;
			; SOURCE LINE # 240
	MOV  	DPTR,#PM2DI
	MOVX 	A,@DPTR
	MOV  	DPTR,#RamcodeCmd
	MOVX 	@DPTR,A
;                 continue;
			; SOURCE LINE # 241
	SJMP 	?C0019
;         	}
			; SOURCE LINE # 242
?C0033:
;             else
;             {
			; SOURCE LINE # 244
;         	    RamcodeCmd = PM2DI;
			; SOURCE LINE # 245
	MOV  	DPTR,#PM2DI
	MOVX 	A,@DPTR
	MOV  	DPTR,#RamcodeCmd
	MOVX 	@DPTR,A
;             }
			; SOURCE LINE # 246
; 		}	
			; SOURCE LINE # 247
?C0025:
; 		
;         if ( RamcodeCmd == 0x55)
			; SOURCE LINE # 249
	MOV  	DPTR,#RamcodeCmd
	MOVX 	A,@DPTR
	CJNE 	A,#055H,?C0035
;      	{
			; SOURCE LINE # 250
;      		WinFlashMark = 0x33;
			; SOURCE LINE # 251
	MOV  	DPTR,#WinFlashMark
	MOV  	A,#033H
	MOVX 	@DPTR,A
;         	break;
			; SOURCE LINE # 252
	SJMP 	?C0020
;   		}
			; SOURCE LINE # 253
?C0035:
; 		else if ( RamcodeCmd == 0xAF)
			; SOURCE LINE # 254
	MOV  	DPTR,#RamcodeCmd
	MOVX 	A,@DPTR
	XRL  	A,#0AFH
	JZ   	$ + 5H
	LJMP 	?C0019
;      	{
			; SOURCE LINE # 255
;             //#ifdef HSPI_DefferingMode
;             //HCTRL2R = 0x80;	
;             HCTRL2R=0x00;
			; SOURCE LINE # 258
	MOV  	DPTR,#HCTRL2R
	MOVX 	@DPTR,A
;             CLEAR_MASK(IER7,Int_DeferredSPI);   // Disable HSPI interrupt 
			; SOURCE LINE # 259
	MOV  	DPTR,#IER7
	MOVX 	A,@DPTR
	ANL  	A,#0F7H
	MOVX 	@DPTR,A
;             ISR7 =Int_DeferredSPI;  // W/C interrupt status
			; SOURCE LINE # 260
	MOV  	DPTR,#ISR7
	MOV  	A,#08H
	MOVX 	@DPTR,A
; 	        GPCRH3 = INPUT;         // Set input mode
			; SOURCE LINE # 261
	MOV  	DPTR,#GPCRH3
	MOV  	A,#080H
	MOVX 	@DPTR,A
; 	        GPCRH4 = INPUT;         // Set input mode
			; SOURCE LINE # 262
	MOV  	DPTR,#GPCRH4
	MOVX 	@DPTR,A
; 	        GPCRH5 = INPUT;         // Set input mode
			; SOURCE LINE # 263
	MOV  	DPTR,#GPCRH5
	MOVX 	@DPTR,A
; 	        GPCRH6 = INPUT;         // Set input mode
			; SOURCE LINE # 264
	MOV  	DPTR,#GPCRH6
	MOVX 	@DPTR,A
;             SET_MASK(RSTC4,RSPI);   // Reset SPI
			; SOURCE LINE # 265
	MOV  	DPTR,#RSTC4
	MOVX 	A,@DPTR
	ORL  	A,#01H
	MOVX 	@DPTR,A
;             //#endif
;             
; 			WDTRST = 1;			// Reset watch dog timer
			; SOURCE LINE # 268
	SETB 	WDTRST
; 			WDTEB = 1;			// Enable watch dog
			; SOURCE LINE # 269
	SETB 	WDTEB
?C0038:
;        		while(1);			// Wait for watch dog time-out
			; SOURCE LINE # 270
	SJMP 	?C0038
;         }
			; SOURCE LINE # 271
; 	}
			; SOURCE LINE # 272
?C0020:
; 
; 	_nop_();
			; SOURCE LINE # 274
	NOP  	
; 
; 	GPCRH0 = ALT;
			; SOURCE LINE # 276
	CLR  	A
	MOV  	DPTR,#GPCRH0
	MOVX 	@DPTR,A
; 
;     #pragma asm
;     EXTRN CODE (main)
	  EXTRN CODE (main)
;     LJMP    main
	  LJMP    main
;     #pragma endasm
; 
; }
			; SOURCE LINE # 283
	RET  	
; END OF HSPI_CmdRamCode

; 
; //-----------------------------------------------------------------------------
; // Changing PLL frequency function
; //-----------------------------------------------------------------------------
; void ChangePLLFrequency(BYTE newseting)

	RSEG  ?PR?_ChangePLLFrequency?OEM_HSPI
_ChangePLLFrequency:
	USING	0
;---- Variable 'newseting?540' assigned to Register 'R7' ----
			; SOURCE LINE # 288
; {
			; SOURCE LINE # 289
;     if(newseting!=PLLFREQR)
			; SOURCE LINE # 290
	MOV  	DPTR,#PLLFREQR
	MOVX 	A,@DPTR
	XRL  	A,R7
	JZ   	?C0042
;     {
			; SOURCE LINE # 291
;         PLLFREQR = newseting;
			; SOURCE LINE # 292
	MOV  	A,R7
	MOVX 	@DPTR,A
;         PLLCTRL = 1;
			; SOURCE LINE # 293
	MOV  	DPTR,#PLLCTRL
	MOV  	A,#01H
	MOVX 	@DPTR,A
;         DisableAllInterrupt();
			; SOURCE LINE # 294
	LCALL	DisableAllInterrupt
; 	    PCON =2 ;             	// enter sleep mode
			; SOURCE LINE # 295
	MOV  	PCON,#02H
; 	    _nop_();
			; SOURCE LINE # 296
	NOP  	
; 	    _nop_();
			; SOURCE LINE # 297
	NOP  	
; 	    _nop_();
			; SOURCE LINE # 298
	NOP  	
; 	    _nop_();
			; SOURCE LINE # 299
	NOP  	
; 	    _nop_();
			; SOURCE LINE # 300
	NOP  	
; 	    _nop_();
			; SOURCE LINE # 301
	NOP  	
; 	    _nop_();
			; SOURCE LINE # 302
	NOP  	
; 	    _nop_();	
			; SOURCE LINE # 303
	NOP  	
;     }
			; SOURCE LINE # 304
; }
			; SOURCE LINE # 305
?C0042:
	RET  	
; END OF _ChangePLLFrequency

; 
; //-----------------------------------------------------------------------------
; // Changing SPI flash read mode
; //-----------------------------------------------------------------------------
; void ChangeSPIFlashReadMode(BYTE Mode)

	RSEG  ?PR?_ChangeSPIFlashReadMode?OEM_HSPI
_ChangeSPIFlashReadMode:
;---- Variable 'Mode?641' assigned to Register 'R7' ----
			; SOURCE LINE # 310
; {
			; SOURCE LINE # 311
;     XBYTE restore;
;     restore = FLHCTRL1R;
			; SOURCE LINE # 313
	MOV  	DPTR,#FLHCTRL1R
	MOVX 	A,@DPTR
	MOV  	DPTR,#restore?642
	MOVX 	@DPTR,A
;     CLEAR_MASK(restore, SPIFR0+SPIFR1);
			; SOURCE LINE # 314
	MOVX 	A,@DPTR
	ANL  	A,#0CFH
	MOVX 	@DPTR,A
;     
;     switch(Mode)
			; SOURCE LINE # 316
	MOV  	A,R7
	ADD  	A,#0FEH
	JZ   	?C0046
	DEC  	A
	JZ   	?C0047
	ADD  	A,#02H
	JNZ  	?C0043
;     {
			; SOURCE LINE # 317
;         case SPIReadMode_0:
			; SOURCE LINE # 318
;             break;
			; SOURCE LINE # 319
;             
;         case SPIReadMode_1:
			; SOURCE LINE # 321
?C0045:
;             SET_MASK(restore, SPIFR0);
			; SOURCE LINE # 322
	MOV  	DPTR,#restore?642
	MOVX 	A,@DPTR
	ORL  	A,#010H
	MOVX 	@DPTR,A
;             break;  
			; SOURCE LINE # 323
	SJMP 	?C0043
;             
;         case SPIReadMode_2:
			; SOURCE LINE # 325
?C0046:
;             SET_MASK(restore, SPIFR1);
			; SOURCE LINE # 326
	MOV  	DPTR,#restore?642
	MOVX 	A,@DPTR
	ORL  	A,#020H
	MOVX 	@DPTR,A
;             break;
			; SOURCE LINE # 327
	SJMP 	?C0043
;             
;         case SPIReadMode_3:
			; SOURCE LINE # 329
?C0047:
;             SET_MASK(restore, SPIFR0+SPIFR1);
			; SOURCE LINE # 330
	MOV  	DPTR,#restore?642
	MOVX 	A,@DPTR
	ORL  	A,#030H
	MOVX 	@DPTR,A
;             break;
			; SOURCE LINE # 331
;             
;         default:
			; SOURCE LINE # 333
;             break;
			; SOURCE LINE # 334
;     }
			; SOURCE LINE # 335
?C0043:
;     FLHCTRL1R = restore;
			; SOURCE LINE # 336
	MOV  	DPTR,#restore?642
	MOVX 	A,@DPTR
	MOV  	DPTR,#FLHCTRL1R
	MOVX 	@DPTR,A
; }
			; SOURCE LINE # 337
	RET  	
; END OF _ChangeSPIFlashReadMode

; 
; //-----------------------------------------------------------------------------
; // Changing HSPI requestmode
; //-----------------------------------------------------------------------------
; void ChangeHSRSMode(BYTE Mode)

	RSEG  ?PR?_ChangeHSRSMode?OEM_HSPI
_ChangeHSRSMode:
;---- Variable 'Mode?743' assigned to Register 'R7' ----
			; SOURCE LINE # 342
; {
			; SOURCE LINE # 343
;     XBYTE restore;
; 
;     restore=0x00;
			; SOURCE LINE # 346
	CLR  	A
	MOV  	DPTR,#restore?744
	MOVX 	@DPTR,A
;     
;     switch(Mode)
			; SOURCE LINE # 348
	MOV  	A,R7
	ADD  	A,#0FEH
	JZ   	?C0053
	DEC  	A
	JZ   	?C0054
	ADD  	A,#02H
	JNZ  	?C0050
;     {
			; SOURCE LINE # 349
;         case HSPI_RequestSelection_0:
			; SOURCE LINE # 350
;             break;
			; SOURCE LINE # 351
;             
;         case HSPI_RequestSelection_1:
			; SOURCE LINE # 353
?C0052:
;             SET_MASK(restore, BIT3);
			; SOURCE LINE # 354
	MOV  	DPTR,#restore?744
	MOVX 	A,@DPTR
	ORL  	A,#08H
	MOVX 	@DPTR,A
;             break;  
			; SOURCE LINE # 355
	SJMP 	?C0050
;             
;         case HSPI_RequestSelection_2:
			; SOURCE LINE # 357
?C0053:
;             SET_MASK(restore, BIT4);
			; SOURCE LINE # 358
	MOV  	DPTR,#restore?744
	MOVX 	A,@DPTR
	ORL  	A,#010H
	MOVX 	@DPTR,A
;             break;
			; SOURCE LINE # 359
	SJMP 	?C0050
;             
;         case HSPI_RequestSelection_3:
			; SOURCE LINE # 361
?C0054:
;             SET_MASK(restore, BIT3+BIT4);
			; SOURCE LINE # 362
	MOV  	DPTR,#restore?744
	MOVX 	A,@DPTR
	ORL  	A,#018H
	MOVX 	@DPTR,A
;             break;
			; SOURCE LINE # 363
;             
;         default:
			; SOURCE LINE # 365
;             break;
			; SOURCE LINE # 366
;     }
			; SOURCE LINE # 367
?C0050:
;     
;     HSPICTRL2R = restore+BIT2;
			; SOURCE LINE # 369
	MOV  	DPTR,#restore?744
	MOVX 	A,@DPTR
	ADD  	A,#04H
	MOV  	DPTR,#HSPICTRL2R
	MOVX 	@DPTR,A
; }			; SOURCE LINE # 370
	RET  	
; END OF _ChangeHSRSMode

	END
